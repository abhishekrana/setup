#tmux adds a very small delay when sending commands, and this delay can
#interfere with other programs such as the Vim text editor. We can set this
#delay so it’s much more responsive:
set -sg escape-time 1

#The window index will start at 1
set -g base-index 1

#The pane index will start at 1
set -g pane-base-index 1

bind r source-file ~/.tmux.conf \; display "Reloaded!"

#We can send CTRL - a to an application
#running within tmux simply by pressing CTRL - a twice.
bind C-a send-prefix

#Remapping prefix key
set -g prefix C-a
#unbind C-b

bind | split-window -h
bind _ split-window -v

#Remapping Movement Keys for Panes
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

#Use PREFIX CTRL - h and PREFIX CTRL - l to cycle through the
#windows by binding those keystrokes to the respective commands
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

#Resizing Panes
#But if we use the -r flag, we can specify
#that we want the key to be repeatable, meaning we can press the prefix key
#only once and then continuously press the defined key within the repeat limit.
#The default repeat limit is 500 milliseconds, and we can change that by setting
#the repeat-time option to a higher value.
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Handling the Mouse
setw -g mode-mouse on

#Use the mouse to select a pane,
#resize a pane, or even let us click on the window list to select a window.
set -g mouse-select-pane on
set -g mouse-resize-pane on
set -g mouse-select-window on


## 2.3 Visual Styling
#If you’re using Linux, you might need to add
#[ -z "$TMUX" ] && export TERM=xterm-256color
#to your .bashrc file to enable a 256-color Terminal. This conditional statement
#ensures that the TERM variable is only set outside of tmux, since tmux sets
#its own terminal.
set -g default-terminal "screen-256color"

#We use the status-bg and status-fg options to set the foreground and background
#colors of the status bar, so our settings would be like this:
set -g status-fg white
set -g status-bg black

#Changing the Window List Colors
#We want to make it more apparent which window is active,
#setw -g window-status-fg cyan
#setw -g window-status-bg default
#setw -g window-status-attr dim
setw -g window-status-current-fg white
setw -g window-status-current-bg red
setw -g window-status-current-attr bright

#Changing Pane Divider Colors
#set -g pane-border-fg color
#set -g pane-border-bg color
#set -g pane-active-border-fg color
#set -g pane-active-border-bg color

#set -g pane-border-fg green
#set -g pane-border-bg black
#set -g pane-active-border-fg white
#set -g pane-active-border-bg yellow

#Customizing the Command Line
set -g message-fg white
set -g message-bg black
set -g message-attr bright


## 2.4 Customizing the Status Bar
#set -g status-left-length 40
#set -g status-left "#[fg=green]Session: #S #[fg=yellow]#I #[fg=cyan]#P"
#set -g status-right "#[fg=cyan]%d %b %R"
#set -g status-utf8 on
#We can take things a step further by incorporating shell commands into the
#mix by using the #(shell-command) variable to return the result of any external
#command-line program into the status bar.

#By default, tmux refreshes the status bar every 15 seconds.
#set -g status-interval 60

#Centering the Window List
#set -g status-justify centre

#Identifying Activity in Other Windows
setw -g monitor-activity on
set -g visual-activity on

#Appends values onto existing options rather than replacing the option’s value.
#set -a

#Sets the amount of time (in milliseconds) tmux waits
#for a keystroke after pressing PREFIX .
#set -sg escape-time n



### HELP ###

#Ctrl+B c					// Create a new window
#Ctrl+B ,					// Rename current window
#Ctrl+B p					// Previous window
#Ctrl+B n					// Next window
#Ctrl+B w					// List windows
#Ctrl+B %					// Split window vertically
#Ctrl+B : split-window		// Split horizontally; : is for giving named commands
#Ctrl+D 					// Close current window/split
#Ctrl+B d					// Detach from session
#Ctrl+B 1					// Go to window 1

#Session Create:
#tmux new -s sessionName
#tmux new-session -s sessionName

#Session List:
#tmux list-sessions
#tmux ls

#Session Attach:
#tmux attach -t sessionName

#Create a new tmux instance in the background using the command
#tmux new -s session_name -d

#Kill a session
#tmux kill-session -t session_name

#By using the -n flag, we tell tmux to name the first window so we can identify it easily
#tmux new -s windows -n window_name

#Windows:
#If we end up with more than nine windows, we can simply use PREFIX f to find
#a window by name (if we named our windows), or PREFIX w to display a visual
#menu of our windows so we can select the one we’d like.

#Ctrl-b o Switch to the next pane
#Ctrl-b ? List all keybindings

#Ctrl-b [	// Copy Mode - Can scroll up with arrow keys with this 
#			// Press Space to highlight text and Enter to copy it
#Ctrl-b ]	// Paste the copied text

#Panes:
#PREFIX % , 				// Window will divide down the middle and start up a second session in the new pane. 
#							// In addition, the focus will move to this new pane. 
#PREFIX " (double quote) 	// Will split this new pane in half horizontally.

#To cycle through the panes, press PREFIX o . We can also use PREFIX , followed by
#the UP , DOWN , LEFT , or RIGHT keys to move around the panes.

#Pane Layouts:
#- even-horizontal stacks all panes horizontally, left to right.
#- even-vertical stacks all panes vertically, top to bottom.
#- main-horizontal creates one larger pane on the top and smaller panes underneath.
#- main-vertical creates one large pane on the left side of the screen, and stacks 
#  the rest of the panes vertically on the right.
#- tiled arranges all panes evenly on the screen.
#We can cycle through these layouts by pressing PREFIX SPACEBAR


#new-window -n processes "top"
#When we press ENTER , our new window appears and we see the top application
#running, showing our running processes.
#Specifying an initial command for a window is extremely handy for short-term
#tasks, but if we exit the top app by pressing q , the tmux window we created
#will also close. You can use configuration settings to get around this, but if
#you want the window to persist, simply create it without specifying an initial
#command, and then execute your own command in the new window

#tmux new -s development -n editor 
#Creates a session named “development” and names the first window “editor.”

#Configuring tmux
#It first looks in /etc/tmux.conf for a system-wide configuration. It then looks for a file
#called .tmux.conf in the current user’s home directory. If these files don’t exist, tmux
#simply uses its default settings.


### 3. Scripting Customized tmux Environments

# When we attach to the window again, we’ll have our window split into two panes.
# tmux split-window -h -t development

# Scripting Customized tmux Environments
#tmux new-session -s development
#tmux split-window -h -t development

#Giving the initial window a name of “editor,” and immedi-
#ately detaching from this new session with the -d flag.
#tmux new-session -s development -n editor -d

#We place C-m at the end of the line to send the Carriage Return sequence
#tmux send-keys -t development 'cd ~/devproject' C-m
#tmux send-keys -t development 'vim' C-m

#We could have specified a percentage
#tmux split-window -v -p 10 -t development
#tmux select-layout -t development main-horizontal

#format [session]:[window].[pane]
#tmux send-keys -t development:1.2 'cd ~/devproject' C-m

#When we start up our session, we want our first window to be displayed, and
#we do that with the select-window command:
#tmux select-window -t development:1
#tmux attach -t development

##Script
#tmux has-session -t development
#if [ $? != 0 ]
#then
#tmux new-session -s development -n editor -d
#tmux send-keys -t development 'cd ~/devproject' C-m
#tmux send-keys -t development 'vim' C-m
#tmux split-window -v -t development
#tmux select-layout -t development main-horizontal
#tmux send-keys -t development:1.2 'cd ~/devproject' C-m
#tmux new-window -n console -t development
#tmux send-keys -t development:2 'cd ~/devproject' C-m
#tmux select-window -t development:1
#fi
#tmux attach -t development


# 3.2 Using tmux Configuration for Setup
#Up until now, we’ve used the set command, which sets options for the tmux
#session. In order to configure options that affect how we interact with windows,
#we have to use another command, called set-window-option , which we can shorten to setw .

#Using the bind command with the -n prefix tells tmux that the keybinding
#doesn’t require pressing the prefix. For example,
#bind-key -n C-r source-file ~/.tmux.conf
#would make CTRL - r reload the configuration file. Unfortunately this would completely
#disable that key combination in any application that’s running in a tmux session, so
#you’ll want to use this with care.

#=====================================

# Session management
#tmux list-sessions
#tmux new -s session-name
#Ctrl-b d Detach from session
#tmux attach -t [session name]
#tmux kill-session -t session-name

#Ctrl-b c Create new window
#Ctrl-b d Detach current client
#Ctrl-b l Move to previously selected window
#Ctrl-b n Move to the next window
#Ctrl-b p Move to the previous window
#Ctrl-b & Kill the current window
#Ctrl-b , Rename the current window
#Ctrl-b q Show pane numbers (used to switch between panes)
#Ctrl-b o Switch to the next pane
#Ctrl-b ? List all keybindings

## Moving between windows
#Ctrl-b n (Move to the next window)
#Ctrl-b p (Move to the previous window)
#Ctrl-b l (Move to the previously selected window)
#Ctrl-b w (List all windows / window numbers)
#Ctrl-b window number (Move to the specified window number, the
#default bindings are from 0 -- 9)

## Tiling commands
#Ctrl-b % (Split the window vertically)
#Ctrl-b : "split-window" (Split window horizontally)
#Ctrl-b o (Goto next pane)
#Ctrl-b q (Show pane numbers, when the numbers show up type the key to goto that pane)
#Ctrl-b { (Move the current pane left)
#Ctrl-b } (Move the current pane right)

## Make a pane its own window
#Ctrl-b : "break-pane"

#Prefix + z
#fills your entire window with the contents of the current split.








